generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id
  email         String
  password      String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  organizer     Organizer?
  name          String
  emailVerified Boolean
  isOrganizer   Boolean    @default(false)
  image         String?
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
}

model Organizer {
  id               String   @id @default(uuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id])
  organizationName String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  Events Events[]

  @@unique([userId])
  @@map("organizer")
}

model EventsCategory {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Events    Events[]

  @@unique([name])
  @@map("events_category")
}

model Events {
  id            String         @id @default(uuid())
  organizerId   String
  organizer     Organizer      @relation(fields: [organizerId], references: [id])
  title         String
  description   String
  address       String
  country       String
  city          String
  startTime     DateTime
  endTime       DateTime
  categoryId    String
  category      EventsCategory @relation(fields: [categoryId], references: [id])
  coverImageUrl String?
  capacity      Int?
  isPublished   Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@map("events")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
